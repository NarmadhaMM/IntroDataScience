bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
library(glmnet)
dat <- read.csv("http://bit.ly/2P5gTw4")
# data cleaning: delete wrong observations since expense can't be negative
dat <- subset(dat, store_exp > 0 & online_exp > 0)
# get predictors
trainx <- dat[, grep("Q", names(dat))]
# get response
trainy <- dat$store_exp + dat$online_exp
glmfit = glmnet(as.matrix(trainx), trainy)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
0.27*15/70
library(glmnet)
dat <- read.csv("http://bit.ly/2P5gTw4")
# data cleaning: delete wrong observations since expense can't be negative
dat <- subset(dat, store_exp > 0 & online_exp > 0)
# get predictors
trainx <- dat[, grep("Q", names(dat))]
# get response
trainy <- dat$store_exp + dat$online_exp
glmfit = glmnet(as.matrix(trainx), trainy)
print(glmfit)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
coef(glmfit, s = 1200)
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
newdat = matrix(sample(1:9, 30, replace = T), nrow = 3)
predict(glmfit, newdat, s = c(1741, 2000))
plot(cvfit)
cvfit = cv.glmnet(as.matrix(trainx), trainy)
library(glmnet)
dat <- read.csv("http://bit.ly/2P5gTw4")
# data cleaning: delete wrong observations since expense can't be negative
dat <- subset(dat, store_exp > 0 & online_exp > 0)
# get predictors
trainx <- dat[, grep("Q", names(dat))]
# get response
trainy <- dat$store_exp + dat$online_exp
glmfit = glmnet(as.matrix(trainx), trainy)
cvfit = cv.glmnet(as.matrix(trainx), trainy)
plot(cvfit)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(MASS)
dat <- read.csv("http://bit.ly/2KXb1Qi")
fit <- glm(y~., dat, family = "binomial")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
4048.56 *2
4048.56*2
4048.56*2/12
580/12
1624 + # mortgage
674.8 + # tax
48.33 + # insurance
230 + # HOA
50 + # Internet
59 + # ATT
50 # estimated utility bill
1624 + # mortgage
674.8 + # tax
48.33 + # insurance
230 + # HOA
0
66+63+62+67+75+75+690+690
66+63+62+67+75+75+690+690 + 31.18
1249*0.85
200*20
4000/7
# Ian and his sisters
100 +
# Alex
500 +
# Dad and Mom
1345.8 + # iPhone
1000 + #bag
# Grandma
500 +
1000 # all rest
1700*3
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
300000*0.02
300000*0.02/12
300000*0.027/12
300000*0.025/12
5000*12/0.025
47/5
47/5*20
47/5*15
97/10*15
dat <- read.csv("http://bit.ly/2KXb1Qi")
trainx = dplyr::select(dat, -y)
trainy = dat$y
fit <- glmnet(as.matrix(trainx), trainy, family = "binomial")
newdat = as.matrix(trainx[1:3, ])
predict(fit, newdat, type = "link", s = c(2.833e-02, 3.110e-02))
levels(as.factor(trainy))
cvfit = cv.glmnet(as.matrix(trainx), trainy, family = "binomial", type.measure = "class")
plot(cvfit)
cvfit$lambda.min
cvfit$lambda.1se
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
library("NetlifyDS")
devtools::install_github("netlify/NetlifyDS")
library("NetlifyDS")
data("sim1_da1")
trainx = dplyr::select(sim1_da1, -y)
# save response variable as as trainy
trainy = sim1_da1$y
# get the group indicator
index <- gsub("\\\\..*", "", names(trainx))
index[1:50]
index <- gsub("\\\\..*", "", names(trainx))
index[1:50]
names(trainx)[1:5]
index <- gsub("\\\\.*", "", names(trainx))
index[1:50]
gsub(".*", "", "Q1.A")
gsub("\.*", "", "Q1.A")
gsub("\\.*", "", "Q1.A")
gsub("\\\.*", "", "Q1.A")
gsub("\\..*", "", "Q1.A")
index <- gsub("\\..*", "", names(trainx))
index[1:50]
cv_fit <- cv_glasso(trainx, trainy, nlam = nlam, kfold = kfold, type = "link")
# 只展示部分结果
str(cv_fit)
install.packages("grplasso")
nlam <- 100
# set the type of prediction
# - `link`: return the predicted link function
# - `response`: return the predicted probability
# number of cross-validation folds
kfold <- 10
cv_fit <- cv_glasso(trainx, trainy, nlam = nlam, kfold = kfold, type = "link")
# 只展示部分结果
str(cv_fit)
load("https://github.com/happyrabbit/DataScientistR/blob/master/Data/cv_fit.RData")
load("../DataScientistR/Data/cv_fit.RData")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
plot(cv_fit)
load("../DataScientistR/Data/cv_fit.RData")
plot(cv_fit)
70000/4
70000/4*10
70000/4*10 + 135000
70000/4*7 + 135000
70000/4*7.5 + 135000
plot(cv_fit)
View(cvfit)
fitgl <- fitglasso(trainx, trainy, lambda = 0.922, na_action = na.pass)
trainx = dplyr::select(sim1_da1, -y)
# save response variable as as trainy
trainy = sim1_da1$y
# get the group indicator
index <- gsub("\\..*", "", names(trainx))
fitgl <- fitglasso(trainx, trainy, lambda = 0.922, na_action = na.pass)
coef(fitgl)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
sim.dat <- read.csv("http://bit.ly/2P5gTw4")
fit<-lm(income~store_exp+online_exp+store_trans+online_trans,data=sim.dat)
summary(fit)
round(summary(fit)$sigma,0)
round(summary(fit)$adj.r.squared,2)
sim.dat <- read.csv("http://bit.ly/2P5gTw4")
ymad <- mad(na.omit(sim.dat$income))
# calculate z-score
zs <- (sim.dat$income - mean(na.omit(sim.dat$income)))/ymad
# which(na.omit(zs>3.5)): identify outliers which(is.na(zs)):
# identify missing values
idex <- c(which(na.omit(zs > 3.5)), which(is.na(zs)))
# delete rows with outliers and missing values
sim.dat <- sim.dat[-idex, ]
fit <- lm(income ~ store_exp + online_exp + store_trans + online_trans,
data = sim.dat)
summary(fit)
sim.dat <- read.csv("http://bit.ly/2P5gTw4")
fit<-lm(income~store_exp+online_exp+store_trans+online_trans,data=sim.dat)
summary(fit)
summary(select(sim.dat, store_exp,  online_exp, store_trans,
online_trans))
summary(dplyr::select(sim.dat, store_exp,  online_exp, store_trans,
online_trans))
summary(sim.dat$income)
sim.dat <- read.csv("http://bit.ly/2P5gTw4")
ymad <- mad(na.omit(sim.dat$income))
# calculate z-score
zs <- (sim.dat$income - mean(na.omit(sim.dat$income)))/ymad
# which(na.omit(zs>3.5)): identify outliers which(is.na(zs)):
# identify missing values
idex <- c(which(na.omit(zs > 3.5)), which(is.na(zs)))
# delete rows with outliers and missing values
sim.dat <- sim.dat[-idex, ]
fit <- lm(income ~ store_exp + online_exp + store_trans + online_trans,
data = sim.dat)
summary(fit)
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
round(summary(fit)$adj.r.squared*100,2)
round((summary(fit)$adj.r.squared)*100,0)
sim.dat <- read.csv("http://bit.ly/2P5gTw4")
fit<- lm(formula = income ~ store_exp + online_exp + store_trans +
online_trans, data = sim.dat)
summary(fit)
round((summary(fit)$adj.r.squared)*100,0)
paste0(round((summary(fit)$adj.r.squared)*100,0),"%")
round(summary(fit)$sigma,0)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
round(summary(fit)$sigma,0)
sim.dat <- read.csv("http://bit.ly/2P5gTw4")
fit<- lm(formula = income ~ store_exp + online_exp + store_trans +
online_trans, data = sim.dat)
summary(fit)
round(summary(fit)$sigma,0)
print(round(summary(fit)$sigma,0))
str(round(summary(fit)$sigma,0))
as.integer(round(summary(fit)$sigma,0))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
library(dplyr)
library(randomForest)
library(caret)
library(readr)
disease_dat <- read.csv("http://bit.ly/2KXb1Qi")
# you can check the data using glimpse()
# glimpse(disease_dat)
formatR::tidy_app()
load("../../GitHub/DataScientistR/Data/train_rf.RData")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
formatR::tidy_app()
table(yhat,yTest)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
86/52
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
yhat <- predict(train_rf, xTest)
car::some(yhat)
table(yhat,yTest)
table(yhat,yTest)%>%t()
table(yhat,yTest)
table(as.factor(yhat),as.factor(yTest))
as.factor(yhat)
yhat = as.factor(yhat, levels("1","0"))
yhat = as.factor(yhat, levels(c("1","0") ))
yhat = as.factor(yhat, levels = c("1","0"))
yhat = as.factor(yhat) %>% relevel("1")
yTest = as.factor(yTest) %>% relevel("1")
table(yhat,yTest)
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
formatR::tidy_app()
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
0.9/(1-0.85)
(0.9-0.85)/(1-0.85)
kt<-fmsb::Kappa.test(table(yhat,yTest))
install.packages("fmsb")
kt<-fmsb::Kappa.test(table(yhat,yTest))
kt$Result$estimate
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(pROC)
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve,legacy.axes=T)
library(pROC)
yTest = as.factor(yTest) %>% relevel("0")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve,legacy.axes=T)
yTest = as.numeric(yTest)
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve,legacy.axes=T)
yTest = as.factor(yTest) %>% relevel("0")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve,legacy.axes=T)
yhatprob[,2]
head(yhatprob)
yTest = as.factor(yTest) %>% relevel("1")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve,legacy.axes=T)
yhatprob <- predict(train_rf, xTest, "prob")
set.seed(100)
car::some(yhatprob)
trainIndex <- createDataPartition(disease_dat$y, p = 0.8,
list = F, times = 1)
xTrain <- disease_dat[trainIndex, ] %>% dplyr::select(-y)
xTest <- disease_dat[-trainIndex, ] %>% dplyr::select(-y)
# the response variable need to be factor
yTrain <- disease_dat$y[trainIndex] %>% as.factor()
yTest <- disease_dat$y[-trainIndex] %>% as.factor()
yhatprob <- predict(train_rf, xTest, "prob")
set.seed(100)
car::some(yhatprob)
yhat <- predict(train_rf, xTest)
car::some(yhat)
yhat = as.factor(yhat) %>% relevel("1")
yTest = as.factor(yTest) %>% relevel("1")
table(yhat,yTest)
yTest = as.factor(yTest) %>% relevel("0")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve,legacy.axes=T)
head(yTest)
head(as.numeric(yTest))
trainIndex <- createDataPartition(disease_dat$y, p = 0.8,
list = F, times = 1)
xTrain <- disease_dat[trainIndex, ] %>% dplyr::select(-y)
xTest <- disease_dat[-trainIndex, ] %>% dplyr::select(-y)
# the response variable need to be factor
yTrain <- disease_dat$y[trainIndex] %>% as.factor()
yTest <- disease_dat$y[-trainIndex] %>% as.factor()
yhatprob <- predict(train_rf, xTest, "prob")
set.seed(100)
car::some(yhatprob)
set.seed(100)
# separate the data to be training and testing
trainIndex <- createDataPartition(disease_dat$y, p = 0.8,
list = F, times = 1)
xTrain <- disease_dat[trainIndex, ] %>% dplyr::select(-y)
xTest <- disease_dat[-trainIndex, ] %>% dplyr::select(-y)
# the response variable need to be factor
yTrain <- disease_dat$y[trainIndex] %>% as.factor()
yTest <- disease_dat$y[-trainIndex] %>% as.factor()
yhatprob <- predict(train_rf, xTest, "prob")
set.seed(100)
car::some(yhatprob)
yhat <- predict(train_rf, xTest)
car::some(yhat)
yhat2 = as.factor(yhat) %>% relevel("1")
yTest2 = as.factor(yTest) %>% relevel("1")
table(yhat2,yTest2)
kt<-fmsb::Kappa.test(table(yhat,yTest))
kt$Result
yTest
as.numeric(yTest)
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve,legacy.axes=T)
plot(rocCurve)
yTest = as.factor(yTest) %>% relevel("1")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve)
rocCurve<-roc(response=yTest,predictor=yhatprob[,1])
plot(rocCurve)
yTest = as.factor(yTest) %>% relevel("0")
rocCurve<-roc(response=yTest,predictor=yhatprob[,1])
plot(rocCurve)
yTest = as.factor(yTest) %>% relevel("0")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
yTest = as.factor(yTest) %>% relevel("1")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
yTest = as.factor(yTest) %>% relevel("0")
rocCurve<-roc(response=yTest,predictor=yhatprob[,2])
plot(rocCurve)
rocCurve<-roc(response=yTest,predictor=yhatprob[,1])
plot(rocCurve)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
rocCurve<-roc(response=yTest,
predictor=yhatprob[,2],
levels = rev(levels(yTest)))
plot(rocCurve)
rocCurve<-roc(response=yTest,
predictor=yhatprob[,2],
levels = levels(yTest))
plot(rocCurve)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
load("../../../Dropbox/Book_DS/Data/gbmTune.RData")
load("../../../Dropbox/Book_DS/Data/rfTune.RData")
load("../../../Dropbox/Book_DS/Data/rfTune.RData")
load("../../../Dropbox/Book_DS/Data/bagTune.RData")
treebagRoc <- roc(response = bagTune$pred$obs,
predictor = bagTune$pred$Female,
levels = rev(levels(bagTune$pred$obs)))
rfRoc <- roc(response = rfTune$pred$obs,
predictor = rfTune$pred$Female,
levels = rev(levels(rfTune$pred$obs)))
gbmRoc <- roc(response = gbmTune$pred$obs,
predictor = gbmTune$pred$Female,
levels = rev(levels(gbmTune$pred$obs)))
plot(rpartRoc, type = "s", print.thres = c(.5),
print.thres.pch = 16,
print.thres.pattern = "",
print.thres.cex = 1.2,
col = "black", legacy.axes = TRUE,
print.thres.col = "black")
library(caret)
library(pROC)
dat <- read.csv("http://bit.ly/2P5gTw4")
# use the 10 survey questions as predictors
trainx1 <- dat[, grep("Q", names(dat))]
# add a categorical predictor
# use two ways to treat categorical predictor
# trainx1: use approach 1, without encoding
trainx1$segment <- dat$segment
# trainx2: use approach 2, encode it to a set of dummy variables
dumMod<-dummyVars(~.,
data=trainx1,
# Combine the previous variable name and the level name
# as the new dummy variable name
levelsOnly=F)
trainx2 <- predict(dumMod,trainx1)
# the response variable is gender
trainy <- dat$gender
set.seed(100)
rpartTune1 <- caret::train(trainx1, trainy, method = "rpart",
tuneLength = 30,
metric = "ROC",
trControl = trainControl(method = "cv",
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE))
rpartTune1
plot(rpartRoc, type = "s", print.thres = c(.5),
print.thres.pch = 16,
print.thres.pattern = "",
print.thres.cex = 1.2,
col = "black", legacy.axes = TRUE,
print.thres.col = "black")
rpartRoc <- roc(response = rpartTune1$pred$obs,
predictor = rpartTune1$pred$Female,
levels = rev(levels(rpartTune1$pred$obs)))
rpartRoc <- roc(response = rpartTune1$pred$obs,
predictor = rpartTune1$pred$Female,
levels = rev(levels(rpartTune1$pred$obs)))
rpartFactorRoc <- roc(response = rpartTune2$pred$obs,
predictor = rpartTune2$pred$Female,
levels = rev(levels(rpartTune1$pred$obs)))
plot(rpartRoc, type = "s", print.thres = c(.5),
print.thres.pch = 3,
print.thres.pattern = "",
print.thres.cex = 1.2,
col = "red", legacy.axes = TRUE,
print.thres.col = "red")
image = magick::image_read("images/edgedet3.jpeg")
image
image = magick::image_read("images/edgedet3.jpeg")
kernel_vertical = matrix(c(1, 1, 1, 0, 0, 0, -1, -1, -1),
nrow = 3, ncol = 3)
kernel_horizontal = matrix(c(1, 1, 1, 0, 0, 0, -1, -1, -1),
nrow = 3, ncol = 3, byrow = T)
image_edge_vertical = magick::image_convolve(image, kernel_vertical)
image_edge_horizontal = magick::image_convolve(image, kernel_horizontal)
par(mfrow = c(1, 3))
plot(image)
plot(image_edge_vertical)
plot(image_edge_horizontal)
plot(image)
image_edge_vertical
image = magick::image_read("images/edgedet3.jpeg")
```r
image = magick::image_read("images/edgedet3")
kernel_vertical = matrix(c(1, 1, 1, 0, 0, 0, -1, -1, -1),
nrow = 3, ncol = 3)
image = magick::image_read("images/edgedet3")
image = magick::image_read("images/edgedet3.jpeg")
image = magick::image_read("images/edgedet3.jpg")
image
image = magick::image_read("images/edgedet3.jpg")
image
kernel_vertical = matrix(c(1, 1, 1, 0, 0, 0, -1, -1, -1),
nrow = 3, ncol = 3)
kernel_horizontal = matrix(c(1, 1, 1, 0, 0, 0, -1, -1, -1),
nrow = 3, ncol = 3, byrow = T)
image_edge_vertical = magick::image_convolve(image, kernel_vertical)
image_edge_horizontal = magick::image_convolve(image, kernel_horizontal)
par(mfrow = c(1, 3))
plot(image)
plot(image)
plot(image_edge_vertical)
plot(image_edge_horizontal)
```
image = magick::image_read("images/edgedet3.jpg")
kernel_vertical = matrix(c(1, 1, 1, 0, 0, 0, -1, -1, -1),
nrow = 3, ncol = 3)
kernel_horizontal = matrix(c(1, 1, 1, 0, 0, 0, -1, -1, -1),
nrow = 3, ncol = 3, byrow = T)
image_edge_vertical = magick::image_convolve(image, kernel_vertical)
image_edge_horizontal = magick::image_convolve(image, kernel_horizontal)
par(mfrow = c(1, 3))
plot(image)
plot(image_edge_vertical)
plot(image_edge_horizontal)
image
plot(image)
plot(image_edge_vertical)
plot(image_edge_horizontal)
